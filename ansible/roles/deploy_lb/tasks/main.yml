---
- name: install packages
  apt:
    name: "{{ packages }}"
    state: present

- name: check if certificates exist
  stat:
    path: /etc/letsencrypt/live/{{ domain_name }}/cert.pem
  register: letsencrypt_cert

- debug: msg="{{ letsencrypt_cert.stat.exists }}"

- name: stop nginx
  service:
    name: nginx
    state: stopped
  when: not letsencrypt_cert.stat.exists

- name: generate certificates for https
  shell: "certbot certonly --standalone --noninteractive --expand --agree-tos --email {{ admin_email }} -d {{ domain_name }} -d www.{{ domain_name }}"
  when: not letsencrypt_cert.stat.exists

- name: start nginx
  service:
    name: nginx
    state: started
  when: not letsencrypt_cert.stat.exists

- name: remove default config
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: copy nginx.conf
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  notify:
    - restart nginx

- name: copy load-balancer.conf
  template:
    src: load-balancer.conf.j2
    dest: /etc/nginx/sites-available/load-balancer.conf
  notify:
    - restart nginx

- name: Create a symbolic link to sites-enabled
  file:
    src: /etc/nginx/sites-available/load-balancer.conf
    path: /etc/nginx/sites-enabled/load-balancer.conf
    state: link


- name: restart nginx
  service: name=nginx state=restarted




- name: install packages
  apt:
    name: "{{ packages }}"
    state: present

- name: add GPG key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: add docker repository to apt
  apt_repository:
    repo: deb https://download.docker.com/linux/debian buster stable
    state: present

- name: install docker python modules
  pip:
    name: "{{ docker_pip }}"
    state: present
    executable: pip3

- name: install docker
  apt:
    name: "{{ docker_install }}"
    state: present

- name: start and enable docker
  service:
    name: docker
    state: started
    enabled: yes

- name: docker login
  docker_login:
    username: "{{ docker_username }}"
    password: "{{ docker_password }}"


- name: "Prometheus exporter"
  docker_container:
    name: nginx-prometheus
    image: nginx/nginx-prometheus-exporter:0.4.2
    ports:
      - 9113:9113
    # networks:
    #   - name: monitoring
    command:
      - nginx.scrape-uri=https://{{ domain_name }}/metrics
      - nginx.retries=10
      - nginx.ssl-verify=false
      - web.telemetry-path=/prometheus
    restart_policy: unless-stopped
    state: started
